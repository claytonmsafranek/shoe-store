TODOs:
- refactor weld of fof creat-react-app onto vite

Alternatives to useEffect for HTTP calls
- Tanstack query
- swr (Vercel)
- Apollo
- Tanstack Router
- Remix
- Next.js with RSC

Third party state management options
    - unidirectional - one immutable store options:
        - Redux
        - Zustand
    - remote state - state fetched from a server (typically via REST or GraphQL)
        - React query
        - Apollo
        - Swr
        - RTK Query (redux but tweaked to focus on server state)
    -proxy state - abstract state behind a proxy object. can mutate proxy. renders are automatically optimized (when proxy is mutated it knows what to rerender)
        - Valtio
        - Mobx
    - atomic state - small pieces of mutable state. similar to react context pattern. renders rae optimized by atom consumption
        - Jotai
        - Recoil
    - state machine - enforced transitions. state charts. good for highly complex state with many transitions
        - XState
    - router state
        - Tanstack Router (loaders)
        - React Router (loaders)


Notes:
- <ErrorBoundary /> only handles uncaught errors, if we are catching errors it will run that code first
    - We could use this as a last ditch effort in weld? Just for errors to bubble up should they not be caught at the source
- for shareable state, like wanting to share a url, store state in the url when possible
- you only want to lift state when a few components need to access the same state - lift to the lowest common component
- indexdb is better for lots of data and lots of read/writes
- local storage is good for small amounts of data and not too frequent read/writes, localstorage is a synchronous api so it will get slow if you are working with a lot of data
and we will see that the browser will lock and freeze up when it is accessing
- check out Ui.dev, they have a lot of public open source hooks (thye are all in the index.js file on their github repo)
- context is often overused, context should be used for global data that RARELY changed, because if context values change, everything under context has to rerender, this is sometimes
the entire app that has to rerender

Testing:
- unit test: testing one thing all by itself (a button component)
    - a unit test should not call a DB, run a browser, make an HTTP call, or rely on stuff on other machines
- integration test: testing afew things together, (maybe a form)
- e2e test: everything is real, going into the browser fill out forms, look for spinners, don't mock anything
